using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Vidly.Models;
//mapper.map(dto..)
using AutoMapper;
using Vidly.DTOs;
using System.Data.Entity; //for Include()

namespace Vidly.Controllers.Api
{
    public class CustomersController : ApiController
    {
        //dbContext and initialization
        private ApplicationDbContext _context;
        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        //-----------------------------GET /api/customers -----------------------------------------

        //public IEnumerable<Customer> GetCustomers()
        //{
        //   return _context.Customers.ToList(); 
        //} 
        //GET /api/customers
        //public IEnumerable<CustomerDTO> GetCustomers()
        //{   // In list select mapper to make a map between source CustomerInDb and DTO generic types, not  objects
        //    return _context.Customers.ToList().Select(Mapper.Map<Customer, CustomerDTO>);
        //}
        public IHttpActionResult GetCustomers()
        {   // In list select mapper to make a map between source CustomerInDb and DTO generic types, not  objects
            var customerDTOs = _context.Customers
                .Include(c => c.MembershipType)
                .ToList().
                Select(Mapper.Map<Customer, CustomerDTO>);

            return Ok(customerDTOs);
        }
        //--------------------------GET /api/customers/1------------------------------------------

        //GET Http request( resource)sent for API endpoint: /api/customers/1

        //public Customer GetCustomer(int id)
        //{
        //    //in a case the page request a customer which doesnt exist
        //    var customerInDB = _context.Customers.SingleOrDefault(c => c.Id == id);
        //    if (customerInDB == null)
        //        throw new HttpResponseException(HttpStatusCode.NotFound);
        //    return customerInDB;
        //}
        //public CustomerDTO GetCustomer(int id) // customerInDb --> (CustomerDTO)object
        //{
        //    //in a case the page request a customer which doesnt exist
        //    var customerInDB = _context.Customers.SingleOrDefault(c => c.Id == id);
        //    if (customerInDB == null)
        //        throw new HttpResponseException(HttpStatusCode.NotFound);

        //    //return customerInDB; --------> dont return full customer object than DTO subset !!!!!!
        //    var mappedSubsetCustomer = Mapper.Map<Customer, CustomerDTO>(customerInDB);
        //    return mappedSubsetCustomer;
        //}
        //  Done with Restfull convention ( Uri: /api/customers/1) and result action is IHttpActionResult

        public IHttpActionResult GetCustomer(int id) // customerInDb --> (CustomerDTO)object
        {
            //in a case the page request a customer which doesnt exist
            var customerInDB = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customerInDB == null)
                return NotFound();

            //return customerInDB; --------> dont return full customer object than DTO subset !!!!!!
            var mappedSubsetCustomer = Mapper.Map<Customer, CustomerDTO>(customerInDB);
            return Ok(mappedSubsetCustomer);
        }

        //---------------------------POST-----------------------------------------

        //POST /api/customers

        //public Customer CreateCustomer(Customer customer)
        //{
        //    //Validation first if created is valid
        //    if (!ModelState.IsValid)
        //        throw new HttpResponseException(HttpStatusCode.BadRequest);

        //    _context.Customers.Add(customer);
        //    _context.SaveChanges(); //DB generates id for customer and return new customer object(for display)

        //    return customer; // HTTP Response with complete representation of the customer!
        //}

        //public CustomerDTO CreateCustomer(CustomerDTO customerDto) //customerDto --> (Customer)object
        //{
        //    //Validation first if created is valid
        //    if (!ModelState.IsValid)
        //        throw new HttpResponseException(HttpStatusCode.BadRequest);
        //    //map customerDTO to some object type of Customer i.e. "fullCustomer"
        //    var mappedFullCustomer = Mapper.Map<CustomerDTO, Customer>(customerDto);

        //    _context.Customers.Add(mappedFullCustomer);
        //    _context.SaveChanges(); //DB generates id for customer and return new customer object(for display)
        //    //but returning customerDTO return with id, generated by DB
        //    customerDto.Id = mappedFullCustomer.Id;
        //    return customerDto; // HTTP Response with complete representation of the customer!
        //} 
        //      Restfull convention : Uri( /api/customers/109) that is to say 10+id
        [HttpPost] //action support post request method
        public IHttpActionResult CreateCustomer(CustomerDTO customerDto) //customerDto --> (Customer)object
        {
            //Validation first if created is valid
            if (!ModelState.IsValid)
                return BadRequest();
            //map customerDTO to some object type of Customer i.e. "fullCustomer"
            var mappedFullCustomer = Mapper.Map<CustomerDTO, Customer>(customerDto);

            _context.Customers.Add(mappedFullCustomer);
            _context.SaveChanges(); //DB generates id for customer and return new customer object(for display)
            //but returning customerDTO return with id, generated by DB
            customerDto.Id = mappedFullCustomer.Id;
            return Created(new Uri(Request.RequestUri + "/" + mappedFullCustomer.Id), customerDto);
        }
        //----------------------------PUT-------------------------------------------
        //PUT /api/customers/1

        //public void UpdateCustomer(int id, Customer customer)
        //{

        //    var customerInDB = _context.Customers.SingleOrDefault(c => c.Id == id);

        //    if (customerInDB == null)
        //        throw new HttpResponseException(HttpStatusCode.NotFound);

        //    if (!ModelState.IsValid)
        //        throw new HttpResponseException(HttpStatusCode.BadRequest);

        //    customerInDB.Name = customer.Name;
        //    customerInDB.MembershipTypeId = customer.MembershipTypeId;
        //    customerInDB.Birthdate = customer.Birthdate;
        //    customerInDB.IsSubscribedToNewsletter = customer.IsSubscribedToNewsletter;

        //    _context.SaveChanges();
        //}
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDTO customerDto) //custDto-----> custInDb
        {   

            var customerInDB = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDB == null)
                return NotFound();

            if (!ModelState.IsValid)
                return BadRequest();
            
            //mapp both of objects: customerInDB ---> customerDto
            Mapper.Map<CustomerDTO,Customer>(customerDto, customerInDB);
            //reflection done
            
            _context.SaveChanges();

            return Ok();
        }

        //DELETE /api/customers/1
        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            var customerInDB = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDB == null)
                return NotFound();

            _context.Customers.Remove(customerInDB);
            _context.SaveChanges();

            return Ok();
        }
        
    }
}
